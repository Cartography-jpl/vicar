# Makefile generated by imake - do not edit!
# $Xorg: imake.c,v 1.6 2001/02/09 02:03:15 xorgcvs Exp $

#
#  "TAEmake.tmpl" - imake template customized for TAE
#

# architecture:  x86_linux

# configfile:  x86_linux.cf

#
# System directories.
#

          SYSINC = /usr/include

#
# Libraries.
#

          TERMLIB =
             CLIB = -lc
             FLIB = -lU77 -lF77

#
# Generic make variables
#

            SHELL = /bin/sh
               AR = ar cq
  BOOTSTRAPCFLAGS =
         ASSEMBLE = false
      HAVETERMLIB = no
               CC = gcc
           CCOPTS =
              CPP = /lib/cpp $(STD_CPP_DEFINES)
           DEPEND = makedepend
     DEPENDCFLAGS = $(CFLAGS)
             FORT = g77 -fno-second-underscore
       FORTOBJEXT = .o
    PREPROCESSCMD = gcc -E $(STD_CPP_DEFINES)
               LD = gcc
               LN = ln
           RANLIB = /bin/true
               RM = rm -f
  STD_CPP_DEFINES = -DSYSV
     STD_CDEFINES = -D_NO_PROTO -DSYSV
   EXTRA_CDEFINES =
       STD_CFLAGS =
     EXTRA_CFLAGS =
 EXTRA_LOAD_FLAGS =
        EXTRALIBS =
       APP_CFLAGS =
   APP_LOAD_FLAGS =
     APP_LINKLIBS =
          SYSLIBS = $(TERMLIB)
      CDEBUGFLAGS = -g
     LDDEBUGFLAGS = -g
           CFLAGS = $(STD_CFLAGS) $(CDEBUGFLAGS) $(CINCLUDES) $(APP_CINCLUDES)                     $(EXTRA_CFLAGS) $(APP_CFLAGS) $(STD_CDEFINES)                     $(EXTRA_CDEFINES) $(CCOPTS)

          LDFLAGS = $(LDDEBUGFLAGS) $(EXTRA_LOAD_FLAGS) $(APP_LOAD_FLAGS)
            SPARC = SparcMachine
        BIGENDIAN = false
       WITH_START = WithStart

        MACROFILE = x86_linux.cf

    RM_FILE_TYPES = .emacs_* *.CKP *.ln *.BAK *.a *.o *..c ,* *~                     a.out core errs tags TAGS make.log make.out
 CG_RM_FILE_TYPES = *.tmp *.?log *.par rehearse.pdf
     AFTERINSTALL = $(RM)
          INSTALL = install
    INST_LIBFLAGS = -m 644
      INST_LIBDIR = $$TAELIB
 INST_RANLIBFLAGS =
   INST_EXECFLAGS =
      INST_BINDIR = $$TAEBIN
               CP = cp
               MV = mv
             MAKE = make
            IMAKE = imake
        IMAKETMPL = "TAEmake.tmpl"
        IMAKEOPTS = -T$(IMAKETMPL) -I$(TAECONFIGDIR)
       IMAKEFLAGS =
        IMAKE_CMD = $(IMAKE) $(IMAKEOPTS)
     TAECONFIGDIR = $$TAE/config
       TAECDEPLIB = $(TAELIB)/libtaec.a
        TAEDEPLIB = $(TAELIB)/libtae.a
       TAEDEPLIBS = $(TAECDEPLIB) $(TAEDEPLIB)

      TAECLINKLIB = -ltaec

       TAELINKLIB = -ltae
      TAELINKLIBS = $(TAECLINKLIB) $(TAELINKLIB)
         LINKLIBS = $(TAELINKLIBS) $(EXTRALIBS) $(APP_LINKLIBS) $(SYSLIBS)

   TAEVERSIONFILE = .version.o
          SORTCMD = sort -u
    LIBSEARCHPATH = -L $$TAELIB
             SCCS = sccs
             PERL = perl

.SUFFIXES: .cc .C
.C.o:
	$(C++) -c $(C++FLAGS) $<
.cc.o:
	$(C++) -c $(C++FLAGS) $<

#
#	source for TM program (taetm)
#
# Change Log:
# 03-jan-92	New -I entries; new depend target...ljn
# 30-oct-92	Target needed for process.np.c on Ultrix 4.3...rt
# 24-mar-93 Optimized taetm files causes problems on HP-UX 9.0...rt
# 29-mar-93 CLIB cannot include libmalloc_G0 due to classic failure...rt
# 03-nov-93 HP needs libBSD to link taetm.  __hpux should be
#           HPArchitecture...rt
# 18-jul-94 Added 1 conditionals to support TAE Classic
# 		extraction...krw
PROG = taetm
VERSION = `date`
VERSION_VAR = vrsion

CINCLUDES = -I. -I$(TAETM) -I$(TAEINC)

SRCS = $(TAETM)/*.c

# TAE developers un-comment the next line.
# OBJDIR = $(TAETM)/
# TAE developers remove the "$(OBJDIR)" prefix from your test object names.
OBJS = 	$(OBJDIR)$(TAEVERSIONFILE) 	$(OBJDIR)action.o 	$(OBJDIR)async.np.o 	$(OBJDIR)asyncport.o  	$(OBJDIR)batch.np.o  	$(OBJDIR)bldjob.o 	$(OBJDIR)cmdfield.o  	$(OBJDIR)compile.o  	$(OBJDIR)declare.o  	$(OBJDIR)dynamic.o  	$(OBJDIR)editor.o 	$(OBJDIR)evalexp.o  	$(OBJDIR)exits.o  	$(OBJDIR)fileins.o  	$(OBJDIR)globals.o   	$(OBJDIR)greet.o  	$(OBJDIR)help.o 	$(OBJDIR)hardcopy.o  	$(OBJDIR)helpsubs.o  	$(OBJDIR)hostcmd.np.o  	$(OBJDIR)if.o  	$(OBJDIR)intlin.o  	$(OBJDIR)intrinsic.o 	$(OBJDIR)let.o  	$(OBJDIR)log.o  	$(OBJDIR)logsubs.o  	$(OBJDIR)loops.o  	$(OBJDIR)menuport.o  	$(OBJDIR)misccmd.o  	$(OBJDIR)movest.o 	$(OBJDIR)package.o  	$(OBJDIR)parser.o  	$(OBJDIR)pdfprc.o  	$(OBJDIR)process.np.o  	$(OBJDIR)qualif.o 	$(OBJDIR)saveres.o  	$(OBJDIR)sendvar.o  	$(OBJDIR)setcheck.o  	$(OBJDIR)setshow.o  	$(OBJDIR)specvcopy.o 	$(OBJDIR)terminal.np.o 	$(OBJDIR)tclwindows.o 	$(OBJDIR)subcmd.o  	$(OBJDIR)symbol.o  	$(OBJDIR)tclfunc.o  	$(OBJDIR)tm.o  	$(OBJDIR)tminit.o  	$(OBJDIR)tmsubs.o  	$(OBJDIR)tmutil.o  	$(OBJDIR)tutcmd.o  	$(OBJDIR)tutdisp.o  	$(OBJDIR)tutglobs.o  	$(OBJDIR)tuthelp.o  	$(OBJDIR)tutorport.o  	$(OBJDIR)tutselect.o  	$(OBJDIR)tutsubs.o 	$(OBJDIR)util.o  	$(OBJDIR)valid.o  	$(OBJDIR)vcopy.o  	$(OBJDIR)wrtmsg.o

DEPLIBS = $(TAELIB)/libtaevicar.a $(TAEDEPLIBS)
APP_LINKLIBS = -ltaevicar

all:: version

version::
	@echo " "
	@echo "     Setting version..."
	$(RM) .version*
	@$(TAEBIN)/cversion "$(VERSION)" "$(VERSION_VAR)"
	@echo "     Finished setting version."
	@echo " "

all::
	@echo " "
	@echo "     Creating $(PROG)..."

all::
	@$(MAKE) -e $(PROG)

$(PROG)::
	@echo "     Building C $(PROG)..."

$(PROG):: $(OBJS) $(DEPLIBS)
	$(RM) $(PROG)
	$(LD) $(LDFLAGS) $(LIBSEARCHPATH) \
		-o $(PROG) $(OBJS) $(LINKLIBS)
	@echo "     Finished building $(PROG)."

install install.$(PROG):: $(PROG)
	@echo "     Installing $(PROG)..."
	$(INSTALL) -c $(INST_EXECFLAGS) $(PROG) $(INST_BINDIR)
	$(AFTERINSTALL) $(PROG)
	@echo "     Finished installing $(PROG)."
all::
	@echo "     Finished creating $(PROG)."
	@echo " "
clean::
	@echo " "
	@echo "     Cleaning $(PROG)..."

clean::
	@echo "     Cleaning $(PROG)..."
	@$(RM) $(PROG)
	@echo "     Finished cleaning $(PROG)."
clean::
	@echo "     Finished cleaning $(PROG)."
	@echo " "

depend::
	@echo " "
	@echo "     Making depends..."
	$(DEPEND) -s "# DO NOT DELETE" -- $(DEPENDCFLAGS) -- $(SRCS)
	@echo "     Finished making depends."
	@echo " "

terminal.np.o: $(TAETAELIB)/terminal.np.c
	$(CC) -c -DTERMINAL_TOL $(CFLAGS) $(TAETAELIB)/terminal.np.c

#
# common rules for all Makefiles
#

Makefiles::
	-@if [ -f Makefile ]; then \
		$(RM) Makefile.bak; \
		$(MV) Makefile Makefile.bak; \
	else exit 0; fi
	@$(IMAKE_CMD) -Ddummy

clean::
	@echo "     Cleaning directory..."
	@$(RM) $(RM_FILE_TYPES) \#*
	@echo "     Finished cleaning directory."
	@echo " "

depend::

#
# dependencies generated by makedepend
#

